name: Build and Deploy Docker Image

on:
  workflow_dispatch:
    inputs:
      app:
        description: 'Select the application to build'
        required: true
        default: 'nodejs'
        type: choice
        options:
          - python
          - java
          - nodejs

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        case "${{ github.event.inputs.app }}" in
          python)
            docker build -t python-app:latest ./my_python_app
            docker save python-app:latest | gzip > python-app.tar.gz
            ;;
          java)
            docker build -t java-app:latest ./my_java_app
            docker save java-app:latest | gzip > java-app.tar.gz
            ;;
          nodejs)
            docker build -t nodejs-app:latest ./my_node_app
            docker save nodejs-app:latest | gzip > nodejs-app.tar.gz
            ;;
          *)
            echo "Invalid application selected"
            exit 1
            ;;
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.inputs.app }}-image
        path: ${{ github.event.inputs.app }}-app.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ github.event.inputs.app }}-image

    - name: Load Docker image
      run: |
        gunzip -c ${{ github.event.inputs.app }}-app.tar.gz | docker load

    - name: Stop running container
      run: |
        docker stop ${{ github.event.inputs.app }}-container || true
        docker rm ${{ github.event.inputs.app }}-container || true

    - name: Run Docker container
      run: |
        case "${{ github.event.inputs.app }}" in
          python)
            docker run -d --name python-container -p 80:5000 python-app:latest
            ;;
          java)
            docker run -d --name java-container -p 80:8080 java-app:latest
            ;;
          nodejs)
            docker run -d --name nodejs-container -p 80:3000 nodejs-app:latest
            ;;
          *)
            echo "Invalid application selected"
            exit 1
            ;;
        ecac
